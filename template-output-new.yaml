---
# Source: app-stack/templates/namespace.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: nebulance-app
  labels:
    name: nebulance-app
    app.kubernetes.io/name: app-stack
    app.kubernetes.io/instance: nebulance-app
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    description: "Namespace for the nebulance-app application stack"
---
# Source: app-stack/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: external-secrets-sa
  namespace: nebulance-app
  labels:
    helm.sh/chart: app-stack-0.1.0
    app.kubernetes.io/name: app-stack
    app.kubernetes.io/instance: nebulance-app
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::531807594086:role/eks-nebulance-external-secrets
automountServiceAccountToken: true
---
# Source: app-stack/templates/postgres-pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: nebulance-app
  labels:
    helm.sh/chart: app-stack-0.1.0
    app.kubernetes.io/name: app-stack
    app.kubernetes.io/instance: nebulance-app
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: database
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: gp3-csi
  resources:
    requests:
      storage: 20Gi
---
# Source: app-stack/templates/backend-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: backend
  namespace: nebulance-app
  labels:
    helm.sh/chart: app-stack-0.1.0
    app.kubernetes.io/name: app-stack
    app.kubernetes.io/instance: nebulance-app
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: backend
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-scheme: "internet-facing"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
spec:
  type: ClusterIP
  ports:
    - port: 3000
      targetPort: 3000
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: app-stack
    app.kubernetes.io/instance: nebulance-app
    app.kubernetes.io/component: backend
---
# Source: app-stack/templates/frontend-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: frontend
  namespace: nebulance-app
  labels:
    helm.sh/chart: app-stack-0.1.0
    app.kubernetes.io/name: app-stack
    app.kubernetes.io/instance: nebulance-app
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: frontend
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-scheme: "internet-facing"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
spec:
  type: LoadBalancer
  ports:
    - port: 80
      targetPort: 8080
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: app-stack
    app.kubernetes.io/instance: nebulance-app
    app.kubernetes.io/component: frontend
---
# Source: app-stack/templates/postgres-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: nebulance-app
  labels:
    helm.sh/chart: app-stack-0.1.0
    app.kubernetes.io/name: app-stack
    app.kubernetes.io/instance: nebulance-app
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: database
spec:
  type: ClusterIP
  ports:
    - port: 5432
      targetPort: 5432
      protocol: TCP
      name: postgres
  selector:
    app.kubernetes.io/name: app-stack
    app.kubernetes.io/instance: nebulance-app
    app.kubernetes.io/component: database
---
# Source: app-stack/templates/backend-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: nebulance-app
  labels:
    helm.sh/chart: app-stack-0.1.0
    app.kubernetes.io/name: app-stack
    app.kubernetes.io/instance: nebulance-app
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: backend
spec:
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: app-stack
      app.kubernetes.io/instance: nebulance-app
      app.kubernetes.io/component: backend
  template:
    metadata:
      labels:
        app.kubernetes.io/name: app-stack
        app.kubernetes.io/instance: nebulance-app
        app.kubernetes.io/component: backend
    spec:
      securityContext:
        fsGroup: 2000
        runAsNonRoot: true
      containers:
      - name: backend
        image: "hilltopconsultancy/nebulance-app:backend-main-20250716-277a1cc"
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 3000
          protocol: TCP
        env:
        - name: PORT
          value: "3000"
        - name: NODE_ENV
          valueFrom:
            secretKeyRef:
              name: application-secrets
              key: NODE_ENV
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: application-secrets
              key: JWT_SECRET
        - name: API_KEY
          valueFrom:
            secretKeyRef:
              name: application-secrets
              key: API_KEY
        - name: DATABASE_URL
          value: "postgresql://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@postgres:5432/$(POSTGRES_DB)"
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: database-secrets
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: database-secrets
              key: POSTGRES_PASSWORD
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: database-secrets
              key: POSTGRES_DB
        - name: POSTGRES_HOST
          value: "postgres"
        - name: POSTGRES_PORT
          value: "5432"
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        resources:
          limits:
            cpu: 1000m
            memory: 1Gi
          requests:
            cpu: 500m
            memory: 512Mi
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1001
          runAsGroup: 1001
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: cache
          mountPath: /app/.cache
      volumes:
      - name: tmp
        emptyDir: {}
      - name: cache
        emptyDir: {}
---
# Source: app-stack/templates/frontend-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: nebulance-app
  labels:
    helm.sh/chart: app-stack-0.1.0
    app.kubernetes.io/name: app-stack
    app.kubernetes.io/instance: nebulance-app
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: frontend
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: app-stack
      app.kubernetes.io/instance: nebulance-app
      app.kubernetes.io/component: frontend
  template:
    metadata:
      labels:
        app.kubernetes.io/name: app-stack
        app.kubernetes.io/instance: nebulance-app
        app.kubernetes.io/component: frontend
    spec:
      securityContext:
        fsGroup: 2000
        runAsNonRoot: true
      containers:
      - name: frontend
        image: "hilltopconsultancy/nebulance-app:frontend-fix"
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        env:
        - name: REACT_APP_API_URL
          value: "/api"
        - name: REACT_APP_ENVIRONMENT
          value: production
        livenessProbe:
          httpGet:
            path: /
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 250m
            memory: 256Mi
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          runAsNonRoot: true
          runAsUser: 101
          runAsGroup: 101
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: var-cache
          mountPath: /var/cache/nginx
        - name: var-run
          mountPath: /var/run
      volumes:
      - name: tmp
        emptyDir: {}
      - name: var-cache
        emptyDir: {}
      - name: var-run
        emptyDir: {}
---
# Source: app-stack/templates/postgres-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: nebulance-app
  labels:
    helm.sh/chart: app-stack-0.1.0
    app.kubernetes.io/name: app-stack
    app.kubernetes.io/instance: nebulance-app
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: database
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: app-stack
      app.kubernetes.io/instance: nebulance-app
      app.kubernetes.io/component: database
  template:
    metadata:
      labels:
        app.kubernetes.io/name: app-stack
        app.kubernetes.io/instance: nebulance-app
        app.kubernetes.io/component: database
    spec:
      securityContext:
        fsGroup: 2000
        runAsNonRoot: true
      containers:
      - name: postgres
        image: "postgres:15-alpine"
        imagePullPolicy: IfNotPresent
        ports:
        - name: postgres
          containerPort: 5432
          protocol: TCP
        env:
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: database-secrets
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: database-secrets
              key: POSTGRES_PASSWORD
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: database-secrets
              key: POSTGRES_DB
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - $(POSTGRES_USER)
            - -d
            - $(POSTGRES_DB)
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - $(POSTGRES_USER)
            - -d
            - $(POSTGRES_DB)
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        resources:
          limits:
            cpu: 1000m
            memory: 2Gi
          requests:
            cpu: 500m
            memory: 1Gi
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          runAsNonRoot: true
          runAsUser: 999
          runAsGroup: 999
          capabilities:
            drop:
            - ALL
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc
---
# Source: app-stack/templates/hpa.yaml
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: frontend-hpa
  namespace: nebulance-app
  labels:
    helm.sh/chart: app-stack-0.1.0
    app.kubernetes.io/name: app-stack
    app.kubernetes.io/instance: nebulance-app
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: frontend
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: frontend
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
---
# Source: app-stack/templates/hpa.yaml
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: backend-hpa
  namespace: nebulance-app
  labels:
    helm.sh/chart: app-stack-0.1.0
    app.kubernetes.io/name: app-stack
    app.kubernetes.io/instance: nebulance-app
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: backend
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: backend
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
---
# Source: app-stack/templates/external-secrets.yaml
apiVersion: external-secrets.io/v1
kind: ExternalSecret
metadata:
  name: 
  namespace: nebulance-app
  labels:
    helm.sh/chart: app-stack-0.1.0
    app.kubernetes.io/name: app-stack
    app.kubernetes.io/instance: nebulance-app
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: database
spec:
  refreshInterval: 1m
  secretStoreRef:
    name: aws-secrets-store
    kind: SecretStore
  target:
    name: 
    creationPolicy: Owner
  data:
---
# Source: app-stack/templates/external-secrets.yaml
apiVersion: external-secrets.io/v1
kind: ExternalSecret
metadata:
  name: 
  namespace: nebulance-app
  labels:
    helm.sh/chart: app-stack-0.1.0
    app.kubernetes.io/name: app-stack
    app.kubernetes.io/instance: nebulance-app
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: backend
spec:
  refreshInterval: 1m
  secretStoreRef:
    name: aws-secrets-store
    kind: SecretStore
  target:
    name: 
    creationPolicy: Owner
  data:
---
# Source: app-stack/templates/secret-store.yaml
apiVersion: external-secrets.io/v1
kind: SecretStore
metadata:
  name: aws-secrets-store
  namespace: nebulance-app
  labels:
    helm.sh/chart: app-stack-0.1.0
    app.kubernetes.io/name: app-stack
    app.kubernetes.io/instance: nebulance-app
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  provider:
    aws:
      service: SecretsManager
      region: eu-central-1
      auth:
        jwt:
          serviceAccountRef:
            name: external-secrets-sa
